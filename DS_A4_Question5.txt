#Implement BFS (Breath First Search) and DFS (Depth First Search)
class TreeNode:
    def __init__(self, value):
        self.value = value
        self.left = None
        self.right = None

def bfs(root):
    if root is None:
        return

    queue = [root]

    while queue:
        node = queue.pop(0)
        print(node.value)

        if node.left is not None:
            queue.append(node.left)

        if node.right is not None:
            queue.append(node.right)

def dfs(root):
    if root is None:
        return

    stack = [root]

    while stack:
        node = stack.pop()
        print(node.value)

        if node.left is not None:
            stack.append(node.left)

        if node.right is not None:
            stack.append(node.right)

# Get the input from the user
root = None
while True:
    print("Enter the value of the node (or 'None' to stop): ")
    value = input()
    if value.lower() == 'none':
        break

    root = insert(root, int(value))

# Print the tree using BFS
print("BFS:")
bfs(root)

# Print the tree using DFS
print("DFS:")
dfs(root)